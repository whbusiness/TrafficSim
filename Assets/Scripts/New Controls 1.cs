//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/New Controls 1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls1: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls1()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls 1"",
    ""maps"": [
        {
            ""name"": ""PlayerMap"",
            ""id"": ""b5912f45-0d0b-406e-b42e-64821dca9800"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4da6810e-b2ff-4631-955c-481b8d863b73"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b21f71bb-2d6e-48a8-bf8c-063f4b8d5f21"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RoundaboutSituation"",
                    ""type"": ""Button"",
                    ""id"": ""9106d3a4-f376-4d94-8556-8e814a69bcb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrafficLightSituation"",
                    ""type"": ""Button"",
                    ""id"": ""ff0c2b2b-f0d9-4154-8a03-1f066c1e860b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FreeRoamSituation"",
                    ""type"": ""Button"",
                    ""id"": ""5a1600ee-87af-47e0-9aff-8caf0a69eb61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""decd0fa7-47d1-4047-969f-bd2dc5753997"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8388a464-0834-43f0-9da3-4008deeaf216"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b44f77fb-6fa7-41ce-b8ae-832274a5fe7a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8e8d88de-a4db-4b61-9735-9678b8a7cdee"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""485078b6-6ff8-4fb6-af22-a44bcd36a0b4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f4bc0269-8aa0-43de-935f-aa7812826fb0"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47a247bd-1441-465e-a2ff-96d1a2838b24"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RoundaboutSituation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e19aa3a5-9a73-4966-8a33-5bc3b1016eef"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrafficLightSituation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""addefd11-eac2-4bec-accc-a544193f50f3"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FreeRoamSituation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMap
        m_PlayerMap = asset.FindActionMap("PlayerMap", throwIfNotFound: true);
        m_PlayerMap_Movement = m_PlayerMap.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMap_Look = m_PlayerMap.FindAction("Look", throwIfNotFound: true);
        m_PlayerMap_RoundaboutSituation = m_PlayerMap.FindAction("RoundaboutSituation", throwIfNotFound: true);
        m_PlayerMap_TrafficLightSituation = m_PlayerMap.FindAction("TrafficLightSituation", throwIfNotFound: true);
        m_PlayerMap_FreeRoamSituation = m_PlayerMap.FindAction("FreeRoamSituation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMap
    private readonly InputActionMap m_PlayerMap;
    private List<IPlayerMapActions> m_PlayerMapActionsCallbackInterfaces = new List<IPlayerMapActions>();
    private readonly InputAction m_PlayerMap_Movement;
    private readonly InputAction m_PlayerMap_Look;
    private readonly InputAction m_PlayerMap_RoundaboutSituation;
    private readonly InputAction m_PlayerMap_TrafficLightSituation;
    private readonly InputAction m_PlayerMap_FreeRoamSituation;
    public struct PlayerMapActions
    {
        private @NewControls1 m_Wrapper;
        public PlayerMapActions(@NewControls1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMap_Movement;
        public InputAction @Look => m_Wrapper.m_PlayerMap_Look;
        public InputAction @RoundaboutSituation => m_Wrapper.m_PlayerMap_RoundaboutSituation;
        public InputAction @TrafficLightSituation => m_Wrapper.m_PlayerMap_TrafficLightSituation;
        public InputAction @FreeRoamSituation => m_Wrapper.m_PlayerMap_FreeRoamSituation;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @RoundaboutSituation.started += instance.OnRoundaboutSituation;
            @RoundaboutSituation.performed += instance.OnRoundaboutSituation;
            @RoundaboutSituation.canceled += instance.OnRoundaboutSituation;
            @TrafficLightSituation.started += instance.OnTrafficLightSituation;
            @TrafficLightSituation.performed += instance.OnTrafficLightSituation;
            @TrafficLightSituation.canceled += instance.OnTrafficLightSituation;
            @FreeRoamSituation.started += instance.OnFreeRoamSituation;
            @FreeRoamSituation.performed += instance.OnFreeRoamSituation;
            @FreeRoamSituation.canceled += instance.OnFreeRoamSituation;
        }

        private void UnregisterCallbacks(IPlayerMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @RoundaboutSituation.started -= instance.OnRoundaboutSituation;
            @RoundaboutSituation.performed -= instance.OnRoundaboutSituation;
            @RoundaboutSituation.canceled -= instance.OnRoundaboutSituation;
            @TrafficLightSituation.started -= instance.OnTrafficLightSituation;
            @TrafficLightSituation.performed -= instance.OnTrafficLightSituation;
            @TrafficLightSituation.canceled -= instance.OnTrafficLightSituation;
            @FreeRoamSituation.started -= instance.OnFreeRoamSituation;
            @FreeRoamSituation.performed -= instance.OnFreeRoamSituation;
            @FreeRoamSituation.canceled -= instance.OnFreeRoamSituation;
        }

        public void RemoveCallbacks(IPlayerMapActions instance)
        {
            if (m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMapActions @PlayerMap => new PlayerMapActions(this);
    public interface IPlayerMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnRoundaboutSituation(InputAction.CallbackContext context);
        void OnTrafficLightSituation(InputAction.CallbackContext context);
        void OnFreeRoamSituation(InputAction.CallbackContext context);
    }
}
